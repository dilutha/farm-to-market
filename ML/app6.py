# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKi1M2x8Sf4hgxJA6G3PTLfmzKUlzkXj
"""

import streamlit as st
import joblib
import pandas as pd
import os
from prophet import Prophet
import matplotlib.pyplot as plt

# -----------------------------
# Absolute paths to your models
# -----------------------------
price_path = "/Users/diluthaweerasigha/Documents/WEB DB Project/ML/trained_models"
demand_path = "/Users/diluthaweerasigha/Documents/WEB DB Project/ML/trained_models-2"

# -----------------------------
# Detect available crops
# -----------------------------
price_crops = [f.split("_")[0].lower() for f in os.listdir(price_path) if f.endswith("_xgb.pkl")]
demand_crops = [f.split("_")[0].lower() for f in os.listdir(demand_path) if f.endswith("_prophet.pkl")]
available_crops = sorted(list(set(price_crops) & set(demand_crops)))

# -----------------------------
# Streamlit UI
# -----------------------------
st.title("ðŸŒ± Crop Price & Demand Prediction Demo")

if not available_crops:
    st.warning("No crops found with both price and demand models!")
else:
    crop = st.selectbox("Select Crop", available_crops)
    days = st.selectbox("Forecast Days", [7, 30, 90])

    st.markdown("---")

    # -----------------------------
    # Manual demo data (replace with real numbers later)
    # -----------------------------
    demo_features = pd.DataFrame([{
        "inflation": 1.5,
        "fuel_price": 298,
        "exchange_rate": 303.62,
        "temperature": 27,
        "rainfall": 140,
        "GDP": 98.96,
        "Rice_Production": 3800,
        "lag1": 100,       # example previous price lags
        "lag7": 105,
        "lag30": 110,
        "category_code": 0,
        "month": 10,
        "quarter": 4
    }])

    if st.button("Predict"):
        # -----------------------------
        # Price Prediction (XGBoost)
        # -----------------------------
        price_model_file = os.path.join(price_path, f"{crop}_xgb.pkl")
        price_model = joblib.load(price_model_file)

        # Align features with model (if needed)
        expected_features = getattr(price_model, "feature_names_in_", demo_features.columns)
        demo_features_full = pd.DataFrame(0, index=[0], columns=expected_features)
        for col in demo_features.columns:
            if col in demo_features_full.columns:
                demo_features_full[col] = demo_features[col].values[0]

        st.write("âœ… Features used for price prediction:", list(demo_features_full.columns))
        predicted_price = price_model.predict(demo_features_full)[0]
        st.subheader(f"ðŸ’° Predicted Price for {crop.capitalize()}: {predicted_price:.2f}")

        # -----------------------------
        # Demand Forecast (Prophet)
        # -----------------------------
        demand_model_file = os.path.join(demand_path, f"{crop}_prophet.pkl")
        demand_model = joblib.load(demand_model_file)
        future = demand_model.make_future_dataframe(periods=days)

        # Add regressors if the model uses them
        for reg in ['inflation', 'fuel_price', 'exchange_rate', 'temperature', 'rainfall', 'GDP', 'Rice_Production']:
            if reg in demand_model.extra_regressors:
                future[reg] = demo_features.iloc[0][reg]

        forecast = demand_model.predict(future)
        demand_forecast = forecast[['ds', 'yhat']].tail(days)

        st.subheader(f"ðŸ“ˆ Demand Forecast for next {days} days")
        st.line_chart(demand_forecast.rename(columns={'ds': 'index'}).set_index('index')['yhat'])